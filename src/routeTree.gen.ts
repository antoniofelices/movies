/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as FrontendRouteImport } from './routes/_frontend'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthMovieIdRouteImport } from './routes/_auth/movie/$id'

const SignUpLazyRouteImport = createFileRoute('/sign-up')()
const SignInLazyRouteImport = createFileRoute('/sign-in')()
const FrontendIndexLazyRouteImport = createFileRoute('/_frontend/')()
const AuthProfileLazyRouteImport = createFileRoute('/_auth/profile')()
const AuthMovieListLazyRouteImport = createFileRoute('/_auth/movie/list')()

const SignUpLazyRoute = SignUpLazyRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/sign-up.lazy').then((d) => d.Route))
const SignInLazyRoute = SignInLazyRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/sign-in.lazy').then((d) => d.Route))
const FrontendRoute = FrontendRouteImport.update({
  id: '/_frontend',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const FrontendIndexLazyRoute = FrontendIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FrontendRoute,
} as any).lazy(() =>
  import('./routes/_frontend/index.lazy').then((d) => d.Route),
)
const AuthProfileLazyRoute = AuthProfileLazyRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/profile.lazy').then((d) => d.Route))
const AuthMovieListLazyRoute = AuthMovieListLazyRouteImport.update({
  id: '/movie/list',
  path: '/movie/list',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/movie/list.lazy').then((d) => d.Route),
)
const AuthMovieIdRoute = AuthMovieIdRouteImport.update({
  id: '/movie/$id',
  path: '/movie/$id',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof SignInLazyRoute
  '/sign-up': typeof SignUpLazyRoute
  '/profile': typeof AuthProfileLazyRoute
  '/': typeof FrontendIndexLazyRoute
  '/movie/$id': typeof AuthMovieIdRoute
  '/movie/list': typeof AuthMovieListLazyRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof SignInLazyRoute
  '/sign-up': typeof SignUpLazyRoute
  '/profile': typeof AuthProfileLazyRoute
  '/': typeof FrontendIndexLazyRoute
  '/movie/$id': typeof AuthMovieIdRoute
  '/movie/list': typeof AuthMovieListLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/_frontend': typeof FrontendRouteWithChildren
  '/sign-in': typeof SignInLazyRoute
  '/sign-up': typeof SignUpLazyRoute
  '/_auth/profile': typeof AuthProfileLazyRoute
  '/_frontend/': typeof FrontendIndexLazyRoute
  '/_auth/movie/$id': typeof AuthMovieIdRoute
  '/_auth/movie/list': typeof AuthMovieListLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-in'
    | '/sign-up'
    | '/profile'
    | '/'
    | '/movie/$id'
    | '/movie/list'
  fileRoutesByTo: FileRoutesByTo
  to: '/sign-in' | '/sign-up' | '/profile' | '/' | '/movie/$id' | '/movie/list'
  id:
    | '__root__'
    | '/_auth'
    | '/_frontend'
    | '/sign-in'
    | '/sign-up'
    | '/_auth/profile'
    | '/_frontend/'
    | '/_auth/movie/$id'
    | '/_auth/movie/list'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  FrontendRoute: typeof FrontendRouteWithChildren
  SignInLazyRoute: typeof SignInLazyRoute
  SignUpLazyRoute: typeof SignUpLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_frontend': {
      id: '/_frontend'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof FrontendRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_frontend/': {
      id: '/_frontend/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof FrontendIndexLazyRouteImport
      parentRoute: typeof FrontendRoute
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/movie/list': {
      id: '/_auth/movie/list'
      path: '/movie/list'
      fullPath: '/movie/list'
      preLoaderRoute: typeof AuthMovieListLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/movie/$id': {
      id: '/_auth/movie/$id'
      path: '/movie/$id'
      fullPath: '/movie/$id'
      preLoaderRoute: typeof AuthMovieIdRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthProfileLazyRoute: typeof AuthProfileLazyRoute
  AuthMovieIdRoute: typeof AuthMovieIdRoute
  AuthMovieListLazyRoute: typeof AuthMovieListLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProfileLazyRoute: AuthProfileLazyRoute,
  AuthMovieIdRoute: AuthMovieIdRoute,
  AuthMovieListLazyRoute: AuthMovieListLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface FrontendRouteChildren {
  FrontendIndexLazyRoute: typeof FrontendIndexLazyRoute
}

const FrontendRouteChildren: FrontendRouteChildren = {
  FrontendIndexLazyRoute: FrontendIndexLazyRoute,
}

const FrontendRouteWithChildren = FrontendRoute._addFileChildren(
  FrontendRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  FrontendRoute: FrontendRouteWithChildren,
  SignInLazyRoute: SignInLazyRoute,
  SignUpLazyRoute: SignUpLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
